# OsteoApp - Cursor AI Rules

## Project Overview

OsteoApp is a **Kotlin Multiplatform** application for osteopaths to manage patients and their clinical visits. The application is primarily designed for **Desktop** use (with future mobile platform support) using **Compose Multiplatform** for the UI layer.

### Key Objectives
- **Patient Management**: Complete patient records with demographics, medical history, and clinical data
- **Visit Tracking**: Detailed visit records including symptoms evaluation, treatments performed, and follow-up plans
- **Data Visualization**: Clear, intuitive interface for viewing patient data and visit history
- **Efficient Data Entry**: Streamlined forms and workflows to facilitate quick data input during consultations

## Technical Stack

### Core Technologies
- **Kotlin Multiplatform**: Shared business logic across platforms
- **Compose Multiplatform**: UI framework for consistent cross-platform interface
- **Primary Target**: Desktop application (Windows, macOS, Linux)
- **Future Targets**: Android and iOS mobile applications

### Architecture Pattern
- **MVI Pattern**: Use Model-View-Intent pattern with ViewModels, Events, States, and SideEffects
- **Clean Architecture**: Implement domain layer with Use Cases and Repository pattern when needed
- **Unidirectional Data Flow**: State changes flow through ViewModels using events and side effects

### Data Management
- **Local Database**: Realm DB for offline-first approach with reactive data flow
- **Data Format**: Hybrid approach using Realm objects for structured data and JSON for complex nested data
- **Backup/Export**: JSON format for data portability and backup
- **Schema Versioning**: Built-in migration support for future updates

## Data Structure Requirements

### Patient Information Schema
Based on the provided clinical form template, the application must handle:

#### 1. Demographics & Basic Info
- Personal details (name, surname, birth date, fiscal code, contacts)
- Address information (structured object)
- Privacy consents and legal information
- Parent information (for minors) - **âœ… IMPLEMENTED** with full CRUD operations
- Referring physician details

#### 2. Clinical History
- Drug allergies, chronic conditions (diabetes, hypertension, etc.)
- Lifestyle factors (work type, physical activity, smoking habits)
- Current medications and treatments
- Anthropometric measurements (height, weight, BMI)
- Cranial indices (specific to osteopathic practice)

#### 3. Visit Records
- **Chief Complaint**: Primary and secondary reasons for consultation
- **Pain Assessment**: VAS scale, pain characteristics, triggers, relieving factors
- **Treatments Performed**: Detailed treatment techniques, duration, recommendations
- **Systems Review**: Comprehensive evaluation across 13 body systems:
  - Cranial, Respiratory, Cardiovascular, Gastrointestinal
  - Urinary, Reproductive, Psycho-neuro-endocrine-immune
  - Skin/Nails, Metabolism, Lymph nodes, Musculoskeletal, Nervous

#### 4. Clinical History
- Previous interventions and traumas
- Diagnostic tests and results
- Pediatric history (when applicable)

### Data Scalability Requirements
- **Flexible Schema**: Support for adding new sections without database migrations
- **Versioned Structures**: Schema versioning for backward compatibility
- **Modular Design**: Each body system as a separate, pluggable module
- **Complex Data Types**: Support for arrays, nested objects, and conditional fields

## Development Guidelines

### Code Structure
```
src/
â”œâ”€â”€ commonMain/
â”‚   â”œâ”€â”€ data/
â”‚   â”‚   â”œâ”€â”€ models/        # Data classes and entities
â”‚   â”‚   â”œâ”€â”€ repositories/  # Data access layer
â”‚   â”‚   â””â”€â”€ database/      # Database setup and DAOs
â”‚   â”œâ”€â”€ domain/
â”‚   â”‚   â”œâ”€â”€ usecases/      # Business logic
â”‚   â”‚   â””â”€â”€ entities/      # Domain models
â”‚   â””â”€â”€ presentation/
â”‚       â”œâ”€â”€ screens/       # Compose UI screens
â”‚       â”œâ”€â”€ components/    # Reusable UI components
â”‚       â””â”€â”€ viewmodels/    # Presentation logic
â”œâ”€â”€ desktopMain/          # Desktop-specific implementations
â”œâ”€â”€ androidMain/          # Android-specific (future)
â””â”€â”€ iosMain/             # iOS-specific (future)
```

### UI/UX Requirements
- **Desktop-First Design**: Optimized for keyboard and mouse interaction
- **Form-Heavy Interface**: Efficient data entry with validation and auto-completion
- **Search and Filter**: Quick patient lookup and visit history filtering
- **Responsive Layout**: Adaptable to different screen sizes and orientations
- **Accessibility**: Support for screen readers and keyboard navigation

### Key Features to Implement
1. **Patient Management** - **âœ… CORE FEATURES IMPLEMENTED**
   - âœ… Add/edit patient records with comprehensive forms
   - âœ… Search and filter patients
   - âœ… Patient history overview with detailed information
   - âœ… Parent information management for minors
   - âœ… Anthropometric measurements and privacy consents

2. **Visit Management** - **ðŸ”„ IN PROGRESS**
   - Create new visit records
   - Multi-step form for comprehensive data entry
   - Template-based visit types
   - Treatment planning and follow-up scheduling

3. **Data Visualization** - **ðŸ“‹ PLANNED**
   - Patient timeline view
   - Treatment progress tracking
   - Statistical dashboards for practice management

4. **Data Management** - **âœ… BASIC FEATURES IMPLEMENTED**
   - âœ… Realm DB integration with reactive data flow
   - âœ… Data validation and error handling
   - ðŸ“‹ Import/export functionality (planned)
   - ðŸ“‹ Backup and restore capabilities (planned)

## Coding Conventions

### Naming Conventions
- **Package Names**: lowercase, descriptive (`com.osteoapp.data.models`)
- **Class Names**: PascalCase (`PatientRepository`, `VisitViewModel`)
- **Function Names**: camelCase (`savePatient`, `getVisitHistory`)
- **Variable Names**: camelCase (`patientId`, `visitDate`)
- **Constants**: SCREAMING_SNAKE_CASE (`MAX_PATIENTS_PER_PAGE`)

### Language and Localization
- **Field Names in Italian**: Database fields and JSON keys should use Italian terms to match the osteopath's workflow
- **UI Labels**: Support for Italian language with potential for internationalization
- **Code Comments**: English for technical documentation, Italian for business logic explanations

### Data Handling
- **Null Safety**: Leverage Kotlin's null safety features extensively
- **Immutable Data**: Prefer data classes and immutable structures
- **Validation**: Implement comprehensive data validation at multiple layers
- **Error Handling**: Robust error handling with user-friendly messages

## Performance Requirements
- **Offline-First**: Application must work without internet connection
- **Fast Search**: Patient search results should appear within 100ms
- **Efficient Storage**: Optimize database queries and minimize storage footprint
- **Responsive UI**: Maintain 60fps performance during data entry and navigation

## Security and Privacy Requirements
- **Local Storage**: All patient data stored locally on the practitioner's device
- **Data Encryption**: Encrypt sensitive patient information at rest
- **Access Control**: Password protection for application access
- **Audit Trail**: Log data modifications for compliance tracking
- **GDPR Compliance**: Support for data export and deletion requests

## Testing Strategy
- **Unit Tests**: Comprehensive coverage for business logic and data models
- **Integration Tests**: Database operations and data synchronization
- **UI Tests**: Critical user workflows and form validation
- **Performance Tests**: Database query performance and UI responsiveness

## Development Priorities
1. **Phase 1**: Core patient and visit management (Desktop) - **ðŸ”„ IN PROGRESS**
   - âœ… Patient management fully implemented
   - ðŸ”„ Visit management in progress
2. **Phase 2**: Advanced search and reporting features - **ðŸ“‹ PLANNED**
3. **Phase 3**: Mobile platform support - **ðŸ“‹ PLANNED**
4. **Phase 4**: Advanced analytics and practice management tools - **ðŸ“‹ PLANNED**

## Current Status (January 2025)
- **Patient Management**: âœ… **COMPLETE** - Full CRUD operations, parent information, clinical history
- **Database Integration**: âœ… **COMPLETE** - Realm DB with reactive data flow
- **UI/UX**: âœ… **COMPLETE** - Material 3 design with Italian localization
- **Visit Management**: ðŸ”„ **IN PROGRESS** - Basic structure exists, needs full implementation
- **Data Validation**: ðŸ”„ **PARTIAL** - Basic validation implemented, needs enhancement

When generating code, prioritize:
- **Type Safety**: Use strong typing throughout the application
- **Maintainability**: Write clean, self-documenting code
- **Scalability**: Design for future feature additions
- **User Experience**: Focus on intuitive, efficient workflows for healthcare professionals